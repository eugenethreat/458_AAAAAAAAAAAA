#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint no-console: 0 */
const commander_1 = tslib_1.__importDefault(require("commander"));
const path_1 = tslib_1.__importDefault(require("path"));
const __1 = tslib_1.__importDefault(require(".."));
const pkg = require("../../package.json");
// import { version } from ;
const help = [
    'Run sclang (the supercollider language interpreter) using the configuration defined in the nearest .supercollider.yaml searching up from the current working directory.',
    '',
    'By default evaluates STDIN and posts to STDOUT. This is a simple command line repl without multi-line support.',
    '',
    'package.json specifies this as an executable with the name of "supercollider" so installing supercollider.js with the global flag will add this to your shell executable path.',
    '',
    'Examples:',
    '',
    'supercollider',
    'supercollider run-this-file.scd',
    'supercollider --config=/path/to/a/custom/config.yaml',
    'supercollider --stdin=false --echo=false --sclang=/path/to/sclang',
    ''
];
const options = {};
function truthy(input) {
    return (input + '') !== 'false';
}
commander_1.default.version(pkg.version)
    .option('--config <path>', 'Configuration file eg. .supercollider.yaml')
    .option('--sclang <path>', 'Path to sclang executable')
    .option('--langPort <port>', 'UDP port for the interpreter to listen on')
    .option('--stdin <bool>', 'Interpret STDIN (default: true)', truthy, true)
    .option('--echo <bool>', 'Echo STDIN to STDOUT (default: true)', truthy, true)
    .option('-v, --verbose', 'Post debugging messages (default: false)', truthy, false);
commander_1.default.on('--help', function () {
    help.forEach(function (line) {
        console.info('    ' + line);
    });
});
commander_1.default.parse(process.argv);
['config', 'sclang', 'langPort', 'stdin', 'echo', 'verbose'].forEach(function (k) {
    if (k in commander_1.default) {
        options[k] = commander_1.default[k];
    }
});
// pass a filename for sclang to execute
if (commander_1.default.args.length) {
    options.executeFile = path_1.default.resolve(commander_1.default.args[0]);
}
__1.default.boot(options).then(function (sclang) {
    // sclang exited
    sclang.on('exit', function () {
        console.warn('sclang exited');
        console.info(options);
        process.exit(1);
    });
}, function (error) {
    // failure to startup
    console.error(error);
    console.trace();
    process.exit(1);
});
//# sourceMappingURL=sclang.js.map