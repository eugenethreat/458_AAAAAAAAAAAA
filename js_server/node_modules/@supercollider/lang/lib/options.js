"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const untildify_1 = tslib_1.__importDefault(require("untildify"));
function loadConfig(aPath) {
    try {
        return js_yaml_1.default.safeLoad(fs_1.default.readFileSync(aPath, "utf8"));
    }
    catch (error) {
        throw new Error(`Error reading config file ${aPath}: ${error.mesage} configPath: ${aPath}`);
    }
}
function loadDotSupercolliderYaml() {
    const paths = [
        ".supercollider.yaml",
        path_1.default.join(os_1.default.homedir(), ".supercollider.yaml")
    ];
    for (const cpath of paths) {
        if (cpath) {
            const resolvedPath = path_1.default.resolve(untildify_1.default(cpath));
            const checked = fs_1.default.existsSync(resolvedPath) ? resolvedPath : null;
            if (checked) {
                console.log(`Loading config: ${checked}`);
                return loadConfig(cpath);
            }
        }
    }
    // No config file found
    return {};
}
function defaultOptions() {
    const opts = {
        debug: false,
        echo: true,
        stdin: false,
        sclang: "sclang",
        failIfSclangConfIsMissing: false,
        conf: {
            includePaths: [],
            excludePaths: [],
            postInlineWarnings: false,
        },
    };
    switch (os_1.default.platform()) {
        case "win32": {
            const defaultRoot = "C:\\Program Files (x86)\\SuperCollider";
            opts.sclang = path_1.default.join(defaultRoot, "sclang.exe");
            // eslint-disable-next-line @typescript-eslint/camelcase
            opts.sclang_conf = path_1.default.join(defaultRoot, "sclang_conf.yaml");
            break;
        }
        case "darwin": {
            opts.sclang = "/Applications/SuperCollider/SuperCollider.app/Contents/MacOS/sclang";
            // eslint-disable-next-line @typescript-eslint/camelcase
            opts.sclang_conf = `${os_1.default.homedir()}/Library/Application Support/SuperCollider/sclang_conf.yaml`;
            break;
        }
        default: {
            const defaultRoot = "/usr/local/bin";
            opts.sclang = path_1.default.join(defaultRoot, "sclang");
            // eslint-disable-next-line @typescript-eslint/camelcase
            opts.sclang_conf = "/usr/local/share/SuperCollider/sclang_conf.yaml";
        }
    }
    return opts;
}
const defaults = defaultOptions();
function resolveOptions(options = {}) {
    const opts = lodash_1.default.defaults({}, options, loadDotSupercolliderYaml(), defaults);
    if (opts.sclang) {
        opts.sclang = path_1.default.resolve(untildify_1.default(opts.sclang));
    }
    if (opts.sclang_conf) {
        // eslint-disable-next-line @typescript-eslint/camelcase
        opts.sclang_conf = path_1.default.resolve(untildify_1.default(opts.sclang_conf));
    }
    return opts;
}
exports.resolveOptions = resolveOptions;
//# sourceMappingURL=options.js.map