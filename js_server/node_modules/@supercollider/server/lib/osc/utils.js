"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Converts a message received from scsynth:
 *
 * ```js
 *  {address: '/n_go',
 *    args:
 *     [ 1000 ,
 *       0 ,
 *       -1 ,
 *       3 ,
 *       0  ],
 *    oscType: 'message' }
 * ```
 *
 * to a flat array format:
 *
 * ```js
 * ['/n_go', 1000, 0, -1, 3, 0]
 * ```
 */
function parseMessage(msg) {
    return [msg.address, ...msg.args];
}
exports.parseMessage = parseMessage;
/**
 * Convert a simple Msg array to OSCMessage object for osc packMessage
 */
function makeMessage(msg) {
    return {
        oscType: "message",
        // first arg of MsgType is always a string
        address: msg[0],
        args: msg.slice(1),
    };
}
exports.makeMessage = makeMessage;
/**
 * Build an OSCBundle for osc packBundle
 *
 * @param {null|Number|Array|Date} time -
 *  - null: now, immediately
 *  - number: unix timestamp in seconds
 *  - Array: `[secondsSince1900Jan1, fractionalSeconds]`
 *  - Date
 * @param {Array} packets - osc messages as `[address, arg1, ...argN]`
 *                        or sub bundles as `[{timetag: , packets: }, ...]`
 */
function makeBundle(time, packets) {
    return {
        oscType: "bundle",
        timetag: time,
        elements: packets.map(asPacket),
    };
}
exports.makeBundle = makeBundle;
/**
 * Format children of a bundle as either OSCMessage or OSCBundle objects.
 * TODO: not supporting nested bundles yet
 */
function asPacket(thing) {
    // not supporting nested bundles right now
    // if ("timetag" in thing) {
    //   return makeBundle(thing.timetag, thing.packets);
    // }
    return makeMessage(thing);
}
exports.asPacket = asPacket;
var osc_1 = require("@supercollider/osc");
exports.dateToTimetag = osc_1.dateToTimetag;
exports.deltaTimeTag = osc_1.deltaTimeTag;
//# sourceMappingURL=utils.js.map