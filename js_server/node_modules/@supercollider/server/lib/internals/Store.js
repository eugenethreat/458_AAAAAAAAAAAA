"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
/**
 * A Store that holds a state tree. This is used by ServerState as
 * its immutable memory storage.
 *
 * Holds an Immutable.Map
 * and offers functions to mutate sub-states
 * in that tree, and stores the new state.
 *
 * https://facebook.github.io/immutable-js/docs/#/Map
 */
class Store {
    constructor() {
        this.state = immutable_1.Map();
    }
    getIn(keys, notSetValue) {
        return this.state.getIn(keys, notSetValue);
    }
    /**
     * Fetch the object at keys
     * pass it to the function which mutates it and returns new sub state.
     */
    mutateState(keys, fn) {
        this.state = this.state.updateIn(keys, immutable_1.Map(), fn);
    }
    /**
     * Fetch one part of the state,
     * mutate it with the callback,
     * which returns result, subState.
     * Save the subState back into state and return the result.
     *
     * @returns {any} result
     */
    mutateStateAndReturn(keys, fn) {
        const [result, subState] = fn(this.state.getIn(keys, immutable_1.Map()));
        this.state = this.state.setIn(keys, subState);
        return result;
    }
}
exports.default = Store;
//# sourceMappingURL=Store.js.map