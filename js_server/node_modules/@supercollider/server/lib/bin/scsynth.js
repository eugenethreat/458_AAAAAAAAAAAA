#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint no-console: 0 */
const commander_1 = tslib_1.__importDefault(require("commander"));
const path_1 = require("path");
const __1 = tslib_1.__importDefault(require(".."));
const help = `
    Run scsynth (the supercollider synthesis server) using the configuration defined in the nearest .supercollider.yaml searching up from the current working directory.

    Examples:

    supercollider-server
    supercollider-server --scsynth=/path/to/scsynth
`;
/* eslint @typescript-eslint/no-var-requires: 0 */
const pkg = require(path_1.join(__dirname, "../../package.json"));
function truthy(input) {
    return input + "" !== "false";
}
commander_1.default
    .version(pkg.version)
    .option("--scsynth <path>", "Path to scsynth executable")
    .option("--serverPort <port>", "UDP port for the server to listen on")
    .option("-v, --verbose", "Post debugging messages (default: false)", truthy, false);
commander_1.default.on("--help", () => help.split("\n").forEach(console.info));
commander_1.default.parse(process.argv);
const options = {};
["config", "scsynth", "serverPort", "verbose"].forEach(function (k) {
    if (k in commander_1.default) {
        options[k] = commander_1.default[k];
    }
});
const s = new __1.default(options);
s.boot();
s.on("exit", function () {
    console.warn("scsynth exited");
    console.info(options);
    process.exit(1);
});
//# sourceMappingURL=scsynth.js.map