"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const untildify_1 = tslib_1.__importDefault(require("untildify"));
function defaultScsynthPath() {
    switch (os_1.default.platform()) {
        case "win32":
            return "C:\\Program Files (x86)\\SuperCollider\\scsynth.exe";
        case "darwin":
            return "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/scsynth";
        default:
            return "/usr/local/bin/scsynth";
    }
}
exports.defaults = {
    // Server
    scsynth: defaultScsynthPath(),
    host: "127.0.0.1",
    serverPort: "57110",
    protocol: "udp",
    debug: false,
    echo: true,
    // scsynth
    numPrivateAudioBusChannels: 112,
    numAudioBusChannels: 128,
    numControlBusChannels: 4096,
    numInputBusChannels: 2,
    numOutputBusChannels: 2,
    numBuffers: 1026,
    maxNodes: 1024,
    maxSynthDefs: 1024,
    blockSize: 64,
    hardwareBufferSize: null,
    memSize: 8192,
    numRGens: 64,
    numWireBufs: 64,
    sampleRate: 44000,
    loadDefs: true,
    inputStreamsEnabled: null,
    outputStreamsEnabled: null,
    device: null,
    verbosity: 0,
    restrictedPath: null,
    ugenPluginsPath: null,
    initialNodeID: 1000,
    remoteControlVolume: false,
    memoryLocking: false,
    threads: false,
    useSystemClock: false,
    zeroConf: false,
};
function loadConfig(aPath) {
    try {
        return js_yaml_1.default.safeLoad(fs_1.default.readFileSync(aPath, "utf8"));
    }
    catch (error) {
        throw new Error(`Error reading config file ${aPath}: ${error.mesage} configPath: ${aPath}`);
    }
}
function loadDotSupercolliderYaml() {
    const paths = [".supercollider.yaml", path_1.default.join(os_1.default.homedir(), ".supercollider.yaml")];
    for (const cpath of paths) {
        if (cpath) {
            const resolvedPath = path_1.default.resolve(untildify_1.default(cpath));
            const checked = fs_1.default.existsSync(resolvedPath) ? resolvedPath : null;
            if (checked) {
                console.log(`Loading config: ${checked}`);
                return loadConfig(cpath);
            }
        }
    }
    // No config file found
    return {};
}
function resolveOptions(options = {}) {
    const opts = lodash_1.default.defaults({}, options, loadDotSupercolliderYaml(), exports.defaults);
    if (opts.scsynth) {
        opts.scsynth = path_1.default.resolve(untildify_1.default(opts.scsynth));
    }
    return opts;
}
exports.resolveOptions = resolveOptions;
//# sourceMappingURL=options.js.map