"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const dryadic_1 = require("dryadic");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const server_1 = require("@supercollider/server");
const defaultOptions = {
    debug: false,
};
/**
 * Boots a new SuperCollider server (scsynth) making it available for all children as `context.scserver`
 *
 * Always boots a new one, ignoring any possibly already existing one in the parent context.
 *
 * `options` are the command line options supplied to scsynth (note: not all options are passed through yet)
 * see {@link Server}
 */
class SCServer extends dryadic_1.Dryad {
    defaultProperties() {
        return {
            options: defaultOptions,
        };
    }
    initialContext() {
        return {
            out: 0,
            group: 0,
        };
    }
    prepareForAdd() {
        return {
            callOrder: "SELF_THEN_CHILDREN" /* SELF_THEN_CHILDREN */,
            updateContext: (context, properties) => ({
                scserver: server_1.boot(lodash_1.default.defaults(properties.options, { log: context.log })),
            }),
        };
    }
    remove() {
        return {
            run: (context) => {
                if (context.scserver) {
                    return context.scserver.quit();
                }
            },
        };
    }
}
exports.default = SCServer;
//# sourceMappingURL=SCServer.js.map