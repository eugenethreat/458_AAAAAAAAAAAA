import { OscType } from "@supercollider/server";
import { Command, Dryad } from "dryadic";
import SynthDef, { CompiledSynthDef, LoadedSynthDef } from "./SCSynthDef";
interface SynthParams {
    [name: string]: OscType | Dryad;
}
interface Properties {
    args: SynthParams;
    def: SynthDef | CompiledSynthDef | LoadedSynthDef | string;
}
/**
 * Creates a synth on the server.
 *
 * Properties:
 * - def
 * - args
 */
export default class Synth extends Dryad<Properties> {
    /**
     * Make a Synth that will play the SynthDef compiled from sclang source code.
     *
     * source may be fully defined:
     *   `SynthDef("defName", { |out=0, freq=440| Out.ar(SinOsc.ar(freq)) });`
     * or more simply:
     *   `{|freq| SinOsc.ar(freq)}`
     * or even just:
     *    `|freq| SinOsc.ar(freq)`
     */
    static fromSource(source: string, args?: SynthParams): Synth;
    /**
     * Make a Synth that will play the SynthDef compiled from an *.scd source code file
     */
    static fromFile(path: string, args?: SynthParams): Synth;
    /**
     * If there is no SCServer in the parent context,
     * then this will wrap itself in an SCServer
     */
    requireParent(): string;
    prepareForAdd(): Command;
    add(): Command;
    remove(): Command;
    private _checkOscType;
}
export {};
//# sourceMappingURL=Synth.d.ts.map