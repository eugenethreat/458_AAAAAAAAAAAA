"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const dryadic_1 = require("dryadic");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const lang_1 = require("@supercollider/lang");
const defaultOptions = {
    debug: true,
    echo: false,
    stdin: false,
};
/**
 * Boots a new SuperCollider language interpreter (sclang) making it available for all children as context.sclang
 *
 * Always boots a new one, ignoring any possibly already existing one in the parent context.
 *
 * `options` are the command line options supplied to sclang (note: not all options are passed through yet)
 * see {@link lang/SCLang}
 *
 * Not to be confused with the other class named SCLang which does all the hard work.
 * This Dryad class is just a simple wrapper around that.
 */
class SCLang extends dryadic_1.Dryad {
    defaultProperties() {
        return {
            options: defaultOptions,
        };
    }
    prepareForAdd() {
        return {
            callOrder: "SELF_THEN_CHILDREN" /* SELF_THEN_CHILDREN */,
            updateContext: (context, properties) => ({
                sclang: lang_1.boot(lodash_1.default.defaults(properties.options, { log: context.log })),
            }),
        };
    }
    remove() {
        return {
            run: (context) => {
                return context.sclang && context.sclang.quit();
            },
        };
    }
}
exports.default = SCLang;
//# sourceMappingURL=SCLang.js.map