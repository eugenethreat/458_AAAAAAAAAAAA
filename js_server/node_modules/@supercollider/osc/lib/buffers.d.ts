/// <reference types="node" />
import { NTPTimeTag, OSCTimeType } from "./types";
/**
 * Holds a Buffer and reads values, moving the offset.
 */
export declare class BufferReader {
    buffer: Buffer;
    private offset;
    constructor(buffer: Buffer);
    readString(consume?: boolean): string;
    readInt32(): number;
    readUInt32(): number;
    readFloat32(): number;
    readDouble(): number;
    readBuffer(): Buffer;
    readTimetag(): NTPTimeTag;
    ended(): boolean;
}
export declare class BufferWriter {
    buffer: Buffer;
    private offset;
    constructor();
    grow(bytes: number): void;
    inc(bytes: number): void;
    crop(): Buffer;
    writeString(str: string): void;
    /**
     * 32-bit big-endian two's complement integer
     * @param value
     */
    writeInt32(value: number): void;
    writeUInt32(value: number): void;
    /**
     * 32-bit big-endian IEEE 754 floating point number
     */
    writeFloat32(value: number): void;
    writeDouble(value: number): void;
    writeBuffer(data: Buffer): void;
    insertBuffer(data: Buffer): void;
    /**
     * 64-bit big-endian fixed-point time tag
     * @param timetag
     */
    writeTimetag(timetag: NTPTimeTag): void;
}
/**
 * A sequence of non-null ASCII characters followed by a null, followed by 0-3 additional null characters to make the total number of bits a multiple of 32. (OSC-string examples) In this document, example OSC-strings will be written without the null characters, surrounded by double quotes.
 */
export declare const padString: (str: string) => string;
export declare const toOscString: (str: string) => Buffer;
export declare const toTimetagBuffer: (timetag: OSCTimeType) => Buffer;
export declare const toIntegerBuffer: (number: number) => Buffer;
export declare const toFloatBuffer: (number: number) => Buffer;
export declare const toDoubleBuffer: (number: number) => Buffer;
//# sourceMappingURL=buffers.d.ts.map