"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const is_plain_object_1 = tslib_1.__importDefault(require("is-plain-object"));
const isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
/**
 * updateContext Middleware
 *
 * Updates the player's context using DryadTree.updateContext
 *
 * Usage:
 *
 * Simplest example. The context is updated with someKey = 'someValue'
 *
 *  add() {
 *   return {
 *    updateContext: {
 *      someKey: 'someValue'
 *    }
 *   };
 *  }
 *
 * or:
 *
 *  prepareForAdd() {
 *    return {
 *      // return a function that will be called at command execution time
 *      updateContext: (context, properties) => {
 *        let nodeID = generateNextId();
 *        // these are the values that will be updated into context
 *        return {
 *          nodeID: nodeID,
 *          pid: startSomeProcess()  // any value that is a Promise will be resolved
 *        };
 *      }
 *    };
 *  }
 *
 */
async function updateContext(command, context, properties, updater) {
    if (command.updateContext) {
        const uc = isFunction_1.default(command.updateContext)
            ? command.updateContext(context, properties)
            : command.updateContext;
        const updates = await resolveValues(uc);
        updater(context, updates);
    }
}
exports.default = updateContext;
async function resolveValues(object) {
    // resolves all values of an object
    const result = {};
    for (const key in object) {
        if (object.hasOwnProperty(key)) {
            const element = object[key];
            // if it's an object then resolve it's values
            result[key] = is_plain_object_1.default(element) ? await resolveValues(element) : await Promise.resolve(element);
        }
    }
    return result;
}
//# sourceMappingURL=updateContext.js.map