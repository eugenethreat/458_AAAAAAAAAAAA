import Dryad from "./Dryad";
/**
 * Convert a JSON object into a tree of instantiated Dryads.
 *
 * A Domain-specific language for easily creating Dryad trees
 * a la: https://github.com/Raynos/virtual-hyperscript
 *
 * This is used for sending tree documents from remote clients,
 * and for writing dryadic documents in JSON form without having to
 * import classes and construct trees filled with `new Object()` etc.
 *
 * className, properties:
 * ['synth', {freq: 440}]

 * className, properties, children:
 * ['audiobus', {numChannels: 2}, [
 *   ['synth', {defName: 'saw', args: {freq: 440}]
 * ]]

 * If there are only 2 items and the second is an Array (not Object),
 * then parse it as:
 *
 * className, children:
 *
 *  ['group', [
 *    ['synth', {freq: 440}]
 *  ]]
 *
 * If a property value is of the form [string, object] or [string, object, array] then assume it is
 * a dryad.
 *
 * ['synth', {
 *    'freq': ['synth', {'defName': 'lfo', 'freq': 0.3}]
 * }]
 *
 * @param {Array|Dryad} root - The Array is the top level (root) dryad form.
 *                           If a Dryad is supplied then no conversion is needed so it is returned immediately.
 * @param {Function} lookupClassByNameFn
 *        This function is provided by the DryadPlayer and converts strings into
 *        Dryad classes. It should throw an error if no Dryad class exists by that name.
 * @returns {Dryad} - the root Dryad
 */
export default function hyperscript(root: any, lookupClassByNameFn: Function): Dryad;
//# sourceMappingURL=hyperscript.d.ts.map