import { Command, Context, Middleware, Properties, UpdateContext } from "./types";
export declare const enum CallOrder {
    SELF_THEN_CHILDREN = "SELF_THEN_CHILDREN",
    PROPERTIES_MODE = "PROPERTIES_MODE"
}
export default class CommandNode {
    commands: Command;
    context: Context;
    properties: Properties;
    id: string;
    children: CommandNode[];
    constructor(commands: Command, context: Context, properties: Properties, id: string, children?: CommandNode[]);
    callFuncs(): Properties;
    /**
     * Execute this CommandNode and call it's children.
     *
     * By default this executes it's children in parallel.
     * Each child would also by default execute it's own children
     * in parallel, so the entire command tree will execute in
     * parallel and resolve when the last straggler resolves.
     *
     * But there are many cases where you wish to block and
     * complete execution before progressing down the tree.
     * eg. booting a server before communicating with it.
     *
     * So a Dryad may pass a callOrder flag in the commands to
     * specify one of several modes of blocking.
     *
     *   {
     *     callOrder: CallOrder.SELF_THEN_CHILDREN
     *   }
     *
     * The modes are:
     *
     * SELF_THEN_CHILDREN - First execute this, when it resolves
     * then call the children (in parallel).
     * This is useful if the Dryad is something like booting a
     * process that the children will need to call communicate with.
     * Wait until the process is booted before proceeding.
     *
     * PROPERTIES_MODE - Special case for dryads in properties.
     * The children of Properties are:
     *
     *    [dryadicProperty1, dryadicProperty2 ... PropertiesOwner].
     *
     * So this mode specifies that each of the dryadicProperties
     * needs to complete before proceeding to the PropertiesOwner.
     *
     * Default is this and children in parallel.
     */
    call(stateTransitionName: string, middlewares: Middleware[], updateContext: UpdateContext): Promise<void>;
    /**
     * Execute this CommandNode's commands
     */
    execute(stateTransitionName: string, middlewares: Middleware[], updateContext: UpdateContext): Promise<void>;
}
//# sourceMappingURL=CommandNode.d.ts.map