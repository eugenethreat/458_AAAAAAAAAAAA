"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const forEach_1 = tslib_1.__importDefault(require("lodash/forEach"));
const isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
const isObject_1 = tslib_1.__importDefault(require("lodash/isObject"));
const is_plain_object_1 = tslib_1.__importDefault(require("is-plain-object"));
const Dryad_1 = tslib_1.__importDefault(require("./Dryad"));
/**
 * Deep map Dryad property object using a function
 *
 * @param {Object} properties - a multi-leveled dictionary/Object
 * @param {Function} fn - mapping function. args: value, key, deep.dot.notation.key
 * @param {Array} _prefixKeys - for internal use in recursion only
 */
function mapProperties(properties, fn, _prefixKeys = []) {
    const result = {};
    if (!isObject(properties)) {
        throw new Error(`Invalid type: ${typeof properties}`);
    }
    forEach_1.default(properties, (value, key) => {
        if (isArray_1.default(value)) {
            result[key] = value.map((v, i) => {
                // if object or array then map deeper
                if (isObject(v)) {
                    return mapProperties(v, fn, appendKey(_prefixKeys, `${key}.${i}`));
                }
                else {
                    return v;
                }
            });
        }
        else if (isObject(value)) {
            result[key] = mapProperties(value, fn, appendKey(_prefixKeys, key));
        }
        else {
            result[key] = fn(value, key, concatKeys(appendKey(_prefixKeys, key)));
        }
    });
    return result;
}
exports.mapProperties = mapProperties;
function appendKey(keys, key) {
    // out? like SynthDef out?
    const out = keys.slice();
    out.push(key);
    return out;
}
function concatKeys(keys) {
    return keys.join(".");
}
function isDryad(value) {
    return isObject_1.default(value) && value instanceof Dryad_1.default;
}
exports.isDryad = isDryad;
/**
 * Checks if object is a plain {} object
 *
 * Not Dryad, Array, Function, number etc
 */
function isObject(value) {
    return is_plain_object_1.default(value);
}
exports.isObject = isObject;
function className(dryad) {
    return dryad.constructor.name;
}
exports.className = className;
//# sourceMappingURL=utils.js.map