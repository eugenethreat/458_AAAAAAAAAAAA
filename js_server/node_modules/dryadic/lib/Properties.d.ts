import Dryad from "./Dryad";
import DryadPlayer from "./DryadPlayer";
import { Command } from "./types";
/**
 * Parent wrapper whose children are the properties and the PropertiesOwner as siblings.
 */
export default class Properties extends Dryad {
    prepareForAdd(): Command;
}
interface PropertiesOwnerProperties {
    indices: number[];
}
/**
 * Object that holds the owner - the Dryad that had Dryads in it's .properties
 */
export declare class PropertiesOwner extends Dryad<PropertiesOwnerProperties> {
    prepareForAdd(player: DryadPlayer): Command;
}
/**
 * If a Dryad contains Dryads in it's properties then return a Properties
 * that inverts the play graph so those dryadic properties come first.
 *
 * Returns a Properties or undefined if there are no Dryads in the properties.
 */
export declare function invertDryadicProperties(dryad: Dryad): Properties | void;
export {};
//# sourceMappingURL=Properties.d.ts.map