#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint no-console: 0 */
const server_1 = require("@supercollider/server");
const commander_1 = tslib_1.__importDefault(require("commander"));
const fs_1 = require("fs");
const ncp_1 = require("ncp");
const path_1 = tslib_1.__importDefault(require("path"));
const help = ["Export a copy of scsynth for use as a standalone."];
// TODO sclang and all classfiles
/* eslint @typescript-eslint/no-var-requires: 0 */
const pkg = require(path_1.default.join(__dirname, "../../package.json"));
async function makeDir(dest) {
    try {
        await fs_1.promises.mkdir(dest);
    }
    catch (error) {
        if (error.code !== "EEXIST") {
            throw error;
        }
    }
}
async function makeExecScript(source, dest) {
    const execScript = [
        "#!/bin/bash",
        'DIR="${BASH_SOURCE%/*}";',
        'if [[ -z "$@" ]]; then',
        '  ARGS="-u 57110";',
        "else",
        '  ARGS="$@";',
        "fi",
        'if [[ -z "$SC_SYNTHDEF_PATH" ]]; then',
        '  export SC_SYNTHDEF_PATH="$DIR/synthdefs/"',
        "fi",
        'export SC_PLUGIN_PATH="$DIR/plugins/";',
        'exec "$DIR/bin/scsynth" $ARGS;',
    ];
    return fs_1.promises.writeFile(dest, execScript.join("\n"), { mode: "0755" });
}
const ncpp = (src, dest) => {
    return new Promise((resolve, reject) => {
        ncp_1.ncp(src, dest, (err) => {
            err ? reject(err) : resolve();
        });
    });
};
async function exportScsynth(dest) {
    const options = server_1.resolveOptions();
    await makeDir(dest);
    await makeDir(path_1.default.join(dest, "bin"));
    const destScsynth = path_1.default.join(dest, "bin", "scsynth");
    // The typing is wrong: resolveOptions does return this
    if (!options.scsynth) {
        throw new Error("No path set for scsynth executable");
    }
    const srcPlugins = path_1.default.join(path_1.default.dirname(options.scsynth), "..", "Resources", "plugins");
    await ncpp(options.scsynth, destScsynth);
    await ncpp(srcPlugins, path_1.default.join(dest, "plugins"));
    await makeDir(path_1.default.join(dest, "synthdefs"));
    await makeExecScript(destScsynth, path_1.default.join(dest, "scsynth"));
}
commander_1.default
    .command("scsynth <dest>")
    .description("Copy scsynth and plugins to the destination directory")
    .action(function (dest) {
    exportScsynth(path_1.default.resolve(dest)).then(function () {
        console.log("Finished");
    });
});
commander_1.default.on("--help", function () {
    help.forEach(function (line) {
        console.info("    " + line);
    });
});
commander_1.default.version(pkg.version).parse(process.argv);
//# sourceMappingURL=export-supercollider.js.map